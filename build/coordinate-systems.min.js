(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/cdaringe/node/coordinate-systems/coordinate-systems.js":[function(require,module,exports){
"use strict";var isArray=require("amp-is-array"),isNumber=require("amp-is-number"),isObject=require("amp-is-object"),extend=require("amp-extend"),degPerRadian=180/Math.PI,Coordinate=function(r){var t,e,o,i,a,n,s,c,d={};if(Object.defineProperty(this,"isRadian",{get:function(){return t},set:function(r){t=!!r,e!==!r&&(e=!r)}}),Object.defineProperty(this,"isDegree",{get:function(){return e},set:function(r){e=r,t!==!r&&(t=!r)}}),Object.defineProperty(d,"cart2d",{get:function(){return[o,i]},set:function(r){o=r[0],i=r[1]}}),Object.defineProperty(d,"cart3d",{get:function(){return[o,i,a]},set:function(r){o=r[0],i=r[1],a=r[2]}}),Object.defineProperty(d,"polar",{get:function(){return[n,s]},set:function(r){n=r[0],s=r[1]}}),Object.defineProperty(d,"cylindrical",{get:function(){return[n,s,a]},set:function(r){n=r[0],s=r[1],a=r[2]}}),Object.defineProperty(d,"spherical",{get:function(){return[n,s,c]},set:function(r){n=r[0],s=r[1],c=r[2]}}),r.isDegree&&!r.isRadian?this.isDegree=!0:this.isRadian=!0,!r.label||!r.coords)throw new Error("no coordinate type defined");this.initialType=r.label,this.pos=d,this.pos[r.label]=r.coords};Coordinate.prototype.cartesian=function(){return this.cart.apply(this,arguments)},Coordinate.prototype.cart=function(r){var t;switch(r=r||{},this.initialType){case"cart2d":return this.pos.cart2d;case"cart3d":return this.pos.cart3d;case"polar":return this.pos.cart2d=Coordinate.polarToCart2d(this.pos.polar,this.isDegree),this.pos.cart2d;case"cylindrical":return t=Coordinate.polarToCart2d(this.pos.polar,this.isDegree),this.pos.cart3d=[t[0],t[1],this.pos.cylindrical[2]],this.pos.cart3d;case"spherical":return this.pos.cart3d=Coordinate.sphericalToCart3d(this.pos.spherical,this.isDegree),this.pos.cart3d;default:throw new Error("cannot convert to/from original/requested types")}},Coordinate.prototype.cylindrical=function(){return this.cyl.apply(this,arguments)},Coordinate.prototype.cyl=function(r){var t;switch(r=r||{},this.initialType){case"cart2d":return t=Coordinate.cart2dToPolar(this.pos.cart2d,this.isDegree,r.center),this.pos.cylindrical=[t[0],t[1],0],this.pos.cylindrical;case"cart3d":return this.pos.cylindrical=Coordinate.cart3dToCylindrical(this.pos.cart3d,this.isDegree,r.center),this.pos.cylindrical;case"polar":return t=this.pos.polar,[t[0],t[1],0];case"cylindrical":return this.pos.cylindrical;case"spherical":return this.pos.cylindrical=Coordinate.sphToCylindrical(this.pos.spherical,this.isDegree),this.pos.cylindrical;default:throw new Error("cannot convert to/from original/requested types")}},Coordinate.prototype.pol=function(){return this.polar.apply(this,arguments)},Coordinate.prototype.polar=function(r){switch(r=r||{},this.initialType){case"cart2d":return this.pos.polar=Coordinate.cart2dToPolar(this.pos.cart2d,this.isDegree,r.center),this.pos.polar;case"polar":return this.pos.polar;default:throw new Error("cannot convert to/from original/requested types")}},Coordinate.prototype.spherical=function(){return this.sph.apply(this,arguments)},Coordinate.prototype.sph=function(r){var t;switch(r=r||{},this.initialType){case"cart2d":return t=Coordinate.cart2dToPolar(this.pos.cart2d,this.isDegree,r.center),this.pos.spherical=[t[0],t[1],0],this.pos.spherical;case"cart3d":return this.pos.spherical=Coordinate.cart3dToSpherical(this.pos.cart3d,this.isDegree,r.center),this.pos.spherical;case"polar":return t=this.pos.polar,[t[0],t[1],0];case"cylindrical":return this.pos.spherical=Coordinate.cylToSpherical(this.pos.cylindrical,this.isDegree),this.pos.spherical;case"spherical":return this.pos.spherical;default:throw new Error("cannot convert to/from original/requested types")}},Coordinate.cartesian=function(r){return Coordinate.cart(r)},Coordinate.cart=function(r){var t;if(isArray(r)&&(r={coords:r}),isObject(r)&&isArray(r.coords)){if(Coordinate.arrToNumeric(r.coords),r.coords.length<2||r.coords.length>3)throw new Error("expected exactly 2 or exactly 3 cartesian options");return t={label:"cart2d",options:r.coords},t=extend(t,r),2===r.coords.length?new Coordinate(t):(t.label="cart3d",new Coordinate(t))}throw new Error("expected options w/ array of [x,y,(z?)] coords")},Coordinate.cylindrical=function(r){return Coordinate.cyl(r)},Coordinate.cyl=function(r){var t;if(isArray(r)&&(r={coords:r}),isObject(r)&&isArray(r.coords)){if(Coordinate.arrToNumeric(r.coords),3!==r.coords.length)throw new Error("expected exactly 3 params [r, t, z]");return t={label:"cylindrical",coords:r.coords},t=extend(t,r),new Coordinate(t)}throw new Error("expected options w/ array of [r, t, z] coords")},Coordinate.polar=function(r){return Coordinate.pol(r)},Coordinate.pol=function(r){var t;if(isArray(r)&&(r={coords:r}),isObject(r)&&isArray(r.coords)){if(Coordinate.arrToNumeric(r.coords),2!==r.coords.length)throw new Error("expected exactly 2 params [r, t]");return t={label:"polar",coords:r.coords},t=extend(t,r),new Coordinate(t)}throw new Error("expected array of [r, t] options")},Coordinate.spherical=function(r){return Coordinate.sph(r)},Coordinate.sph=function(r){var t;if(isArray(r)&&(r={coords:r}),isObject(r)&&isArray(r.coords)){if(Coordinate.arrToNumeric(r.coords),3!==r.coords.length)throw new Error("expected exactly 3 params [r, t, p]");return t={label:"spherical",coords:r.coords},t=extend(t,r),new Coordinate(t)}throw new Error("expected options w/ array of [r, t, p] coords")},Coordinate.arrToNumeric=function(r){var t;if(!isArray(r))throw new TypeError("expected array of number-like values");for(var e=r.length-1;e>=0;e--)if(t=r[e],"string"==typeof t&&(t=parseFloat(t)),!isNumber(t))throw new TypeError(t+" not numeric")},Coordinate.polarToCart2d=function(r,t){var e,o,i,a;return e=r[0],o=r[1],t&&(o*=1/degPerRadian),i=e*Math.cos(o),a=e*Math.sin(o),[i,a]},Coordinate.cart2dToPolar=function(r,t,e){var o,i,a,n;if(!isArray(r)&&2!==r.length)throw new TypeError("expected [x, y] xy array");if(o=r[0],i=r[1],e&&!isArray(e)&&2!==e.length)throw new TypeError("expected [x, y] center array");return e&&(o-=e[0],i-=e[1]),a=Math.sqrt(o*o+i*i),n=Math.atan2(i,o),t&&(n*=degPerRadian),[a,n]},Coordinate.cart3dToCylindrical=function(r,t,e){var o,i=r[0],a=r[1],n=r[2];return o=Coordinate.cart2dToPolar([i,a],t,e),[o[0],o[1],n]},Coordinate.cart3dToSpherical=function(r,t,e){if(e&&3!==e.length)throw new Error("expected center value to have [x, y, z] coordsfor locating sphere center");var o,i,a,n,s,c,d=r[0],p=r[1],l=r[2];return e&&(d-=e[0],p-=e[1],l-=e[2]),o=d*d,i=p*p,a=l*l,n=Math.sqrt(o+i+a),n?(s=Math.atan2(p,d),c=Math.atan2(Math.sqrt(o+i),l),t&&(s*=degPerRadian,c*=degPerRadian)):c=s=0,[n,s,c]},Coordinate.cylToSpherical=function(r,t){var e,o,i=r[0],a=r[1],n=r[2];return t&&(a/=degPerRadian),e=Math.sqrt(i*i+n*n),o=Math.atan2(i,n),t&&(o*=degPerRadian,a*=degPerRadian),[e,a,o]},Coordinate.sphericalToCart3d=function(r,t){var e,o,i,a=r[0],n=r[1],s=r[2];return t&&(n/=degPerRadian,s/=degPerRadian),e=a*Math.sin(s)*Math.cos(n),o=a*Math.sin(s)*Math.sin(n),i=a*Math.cos(s),[e,o,i]},Coordinate.sphToCylindrical=function(r,t){var e,o,i=r[0],a=r[1],n=r[2];return t&&(a/=degPerRadian,n/=degPerRadian),e=i*Math.sin(n),o=i*Math.cos(n),t&&(a*=degPerRadian,n*=degPerRadian),[e,a,o]},module.exports=Coordinate;
},{"amp-extend":"/Users/cdaringe/node/coordinate-systems/node_modules/amp-extend/extend.js","amp-is-array":"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-array/is-array.js","amp-is-number":"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-number/is-number.js","amp-is-object":"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-object/is-object.js"}],"/Users/cdaringe/node/coordinate-systems/node_modules/amp-extend/extend.js":[function(require,module,exports){
var isObject = require('amp-is-object');


module.exports = function(obj) {
    if (!isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
        source = arguments[i];
        for (prop in source) {
            obj[prop] = source[prop];
        }
    }
    return obj;
};

},{"amp-is-object":"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-object/is-object.js"}],"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-array/is-array.js":[function(require,module,exports){
var toString = Object.prototype.toString;
var nativeIsArray = Array.isArray;


module.exports = nativeIsArray || function isArray(obj) {
    return toString.call(obj) === '[object Array]';
};

},{}],"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-number/is-number.js":[function(require,module,exports){
var toString = Object.prototype.toString;


module.exports = function isNumber(obj) {
    return toString.call(obj) === '[object Number]';
};

},{}],"/Users/cdaringe/node/coordinate-systems/node_modules/amp-is-object/is-object.js":[function(require,module,exports){
module.exports = function isObject(obj) {
    var type = typeof obj;
    return !!obj && (type === 'function' || type === 'object');
};

},{}]},{},["/Users/cdaringe/node/coordinate-systems/coordinate-systems.js"]);
